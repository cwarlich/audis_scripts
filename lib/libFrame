#!/bin/echo This is a library which must not be called directly.
source `dirname ${BASH_SOURCE[0]}`/libEnv

AUDIS_OPTIONS="c o j:"
usageTemplate() {
    echo "Usage: $0 [-h] [-c] [-o] [-j jobs] $1"
    echo "Options: -c:     Delete all generated files."
    echo "         -o:     Use old style toolchains."
    echo "         -j jobs Do this many jobs in parallel."
}

tail -f $SCREEN --pid $$ | sed -ue 's/^++* eval \(.*\)$/\1/' 2>/dev/null&

doit() {
    if [ "$j" == "false" ]; then j=40; fi
    destdir=$AUDIS_GENERATED/$1/$AUDIS_TOOLCHAIN/$AUDIS_BOARD
    if $AUDIS_INTERACTIVE; then
        local m="Any additional parameter for the $1 build: "
        if [ -z "$AUDIS_BOARD" ]; then
            read -p"$m" AUDIS_PARAMETER2 1>&2
        else
            read -p"$m" AUDIS_PARAMETER3 1>&2
        fi
    fi
    mkdir -p $destdir
    log=$destdir/build.log
    rm -f $log
    if $c; then
        banner "DELETING DERIVED FILES FOR AUDIS$AUDIS_VERSION, $AUDIS_TOOLCHAIN"
        swap setx rm -rf $destdir 2>&1 | sed -ue '/^++* eval/d' 1>&2; 
        return 0;
    fi
    echo Using toolchain ${AUDIS_TOOL_PREFIX}
    if [ -x ${AUDIS_TOOL_PREFIX}gdb ]; then
        exec 4>&1
        trap "status=$? && sleep 1 && echo A logfile has been written to $log >&4; exit $status" EXIT
        cd $destdir
        echo Being in directory `pwd`
        swap $1 2>&1 | sed -ue '/^++* eval/d' >>$log
        swap banner "AUDIS$AUDIS_VERSION, $AUDIS_TOOLCHAIN FINISHED SUCCESSFULLY" >>$log
        # Dirty hack to wait for tail to print all its messages.
        sleep 1
        rm -f $SCREEN
    else
        echo "The required toolchain seems to be missing or incomplete;"
        echo "run \"makeToolchain -i $AUDIS_TOOLCHAIN\""
        echo "and / or fix or unset your AUDIS_TOOL_PATH first."
        exit 1
    fi
}
