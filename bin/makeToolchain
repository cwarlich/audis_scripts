#!/bin/bash
source `dirname $0`/../lib/libEnv
AUDIS_OPTIONS="s c r i m j: n: N:"

function usage() {
    echo "Usage: $0 [-hscri] [-j jobs] [-n step] [-N step] toolchain"
    echo "Options: -s:     Just simulate, i.e. only prints what would be done."
    echo "         -c:     Delete all generated files."
    echo "         -r:     Create a toolchain with sysroot."
    echo "         -i:     Install toolchain in $AUDIS_TOOL_PATH."
    echo "         -m:     Build libaudis with Manfred's old (GNU)makefile."
    echo "         -j jobs Do this many jobs in parallel."
    echo "         -n step Restart the build with that step."
    echo "         -N step Stop the build after that step."
}

audisGenerated "$@" # We don't want audisToolPath here, as we need full control where to install.
if [ "$j" == "false" ]; then j=40; fi

if [ "$n" != "false" ]; then
    if [ "$n" -eq "$n" ] 2>/dev/null; then # Test if number.
        if [ "$n" -lt "1" ]; then
            echo "The argument to option -n must be a positive integer." 1>&2
            usageWrapper;
        fi
    else 
        echo "The argument to option -n must be a number." 1>&2
        usageWrapper;
    fi
fi

if [ "$N" != "false" ]; then
    if [ "$N" -eq "$N" ] 2>/dev/null; then # Test if number.
        if [ "$N" -lt "1" ]; then
            echo "The argument to option -N must be a positive integer." 1>&2
            usageWrapper;
        fi
    else 
        echo "The argument to option -N must be a number." 1>&2
        usageWrapper;
    fi
fi

host=i386-linux;

GCCCONFIG=""
BINUTILSCONFIG=""
GCCMAKE="CFLAGS_FOR_TARGET=-static"
if [ "$AUDIS_VERSION" == "2" ]; then
    GCC=gcc-4.2
    LIMITSDIR=include
    case $AUDIS_TOOLCHAIN in
        mipsel)
            GCCCONFIG="--disable-libmudflap --disable-libssp"
            GCCMAKE="FLAGS_FOR_TARGET=-EL CFLAGS_FOR_TARGET=-EL CFLAGS_FOR_TARGET+=-static CXXFLAGS_FOR_TARGET=-EL LDFLAGS_FOR_TARGET=-Wl,-EL LIBCFLAGS_FOR_TARGET=-EL LIBCXXFLAGS_FOR_TARGET=-EL"
            CHEATFILE=mips_v42el_basetool.tar
            CHEATDIR=mips-v42-linux
            LINUXARCH=mips
            GLIBCCONFIGPARAMS=configparms_mips_little
            GLIBCCONFIG="--enable-add-ons=glibc-ports-2.10.1,nptl --enable-kernel=2.6.31"
            AUDENV=MIPS_V42
            AUDTARGET=audis_mips_v42
            ;;
        mipseb)
            GCCCONFIG="--disable-libmudflap --disable-libssp"
            CHEATFILE=mips_v42eb_basetool.tar
            CHEATDIR=mips-v42eb-linux
            LINUXARCH=mips
            GLIBCCONFIGPARAMS=configparms_mips_v42eb
            GLIBCCONFIG="--enable-add-ons=glibc-ports-2.10.1,nptl --enable-kernel=2.6.31"
            AUDENV=MIPS_V42EB
            AUDTARGET=audis_mips_v42eb
            ;;
        arm)
            GCCCONFIG="--disable-libmudflap --disable-libssp"
            GCCMAKE=""
            CHEATFILE=arm_v42_basetool.tar
            CHEATDIR=arm-v42-linux-gnueabi
            LINUXARCH=arm
            GLIBCCONFIGPARAMS=configparms_arm
            GLIBCCONFIG="--enable-add-ons=glibc-ports-2.10.1,nptl --enable-kernel=2.6.31"
            AUDENV=ARM_V42
            AUDTARGET=audis_arm_v42
            ;;
        powerpc)
            GCCCONFIG="--disable-libmudflap --disable-libssp"
            CHEATFILE=ppc_v42_basetool.tar
            CHEATDIR=powerpc-v42-linux-gnueabi
            LINUXARCH=powerpc
            GLIBCCONFIGPARAMS=configparms_ppc
            GLIBCCONFIG="--enable-add-ons=nptl --disable-profile --enable-kernel=2.6.31"
            AUDENV=PPC_V42
            AUDTARGET=audis_ppc_v42
            ;;
        i686)
            CHEATFILE=x686_v42_basetool.tar
            CHEATDIR=i686-v42-linux
            LINUXARCH=x86
            GLIBCCONFIGPARAMS=configparms_x686
            GLIBCCONFIG="--enable-add-ons=nptl --disable-profile --with-cpu=i686 --enable-kernel=2.6.31"
            AUDENV=X686_V42
            AUDTARGET=audis_x686_v42
            ;;
        *)
            echo "Error: Unknown architecture!" 1>&2 
            usagWWrapper
            ;;
    esac
else
    GCC=gcc-4
    LIMITSDIR=include-fixed
    case $AUDIS_TOOLCHAIN in
        arm)
            CHEATFILE=arm_v47_basetool.tar
            CHEATDIR=arm-v47-linux-gnueabi
            LINUXARCH=arm
            GLIBCCONFIGPARAMS=configparms_arm
            GLIBCCONFIG="--enable-add-ons=glibc-ports-2.10.1,nptl --enable-kernel=3.2.24"
            AUDENV=ARM_V47
            AUDTARGET=audis_arm_v47
            GCCCONFIG="--with-arch=armv7-a --disable-libmudfla" # probably misspelled!
            BINUTILSCONFIG="--with-arch=armv7-a"
            GCCMAKE="AUTOCONF=no CFLAGS_FOR_TARGET=-static CFLAGS_FOR_TARGET+=-fPIC"
            ;;
        i686)
            CHEATFILE=x686_v47_basetool.tar
            CHEATDIR=i686-v47-linux
            LINUXARCH=x86
            GLIBCCONFIGPARAMS=configparms_x686
            GLIBCCONFIG="--enable-add-ons=nptl --disable-profile --with-cpu=i686 --enable-kernel=3.2.24"
            AUDENV=X686_V47
            AUDTARGET=audis_x686_v47
            GCCMAKE="CFLAGS=-D__EXPORTED_HEADERS CFLAGS_FOR_TARGET=-static"
            ;;
        *)
            echo "Unknown architecture!" 1>&2 
            usageWWrapper
            ;;
    esac
fi

SOURCES=$AUDIS_SOURCE_PATH/pkgs
TRUSTED=/libAuD

if $r; then
    ROOTDIR=$AUDIS_GENERATED/sr
    PREFIX=$ROOTDIR/toolchain/$AUDIS_TARGET
    OBJECTS=$ROOTDIR/objects/$AUDIS_TARGET
    #ARCHIVES=$ROOT/archives/$VERSION
    SYSROOT=$PREFIX/$AUDIS_TARGET/sysroot
    SYSROOTUSR=$SYSROOT/usr
    WITHSYSROOT=--with-sysroot=$SYSROOT
else
    ROOTDIR=$AUDIS_GENERATED/nsr
    PREFIX=$ROOTDIR/toolchain/$AUDIS_TARGET
    OBJECTS=$ROOTDIR/objects/$AUDIS_TARGET
    #ARCHIVES=$ROOT/archives/$VERSION
    SYSROOT=$PREFIX
    SYSROOTUSR=$SYSROOT/$AUDIS_TARGET
    WITHSYSROOT=
fi
mkdir -p $OBJECTS
log=$OBJECTS/build.log
PATH=$PREFIX/bin:$PATH
if ! $c && ! $s; then
    exec 4>&1
    trap "status=$? && sleep 1 && echo A logfile has been written to $log >&4; exit $status" EXIT
fi

if [ -n "$ARCHIVES" ]; then
    for index in $ARCHIVES/*.tar.*; do
        if [ -d $SOURCES/`tar -tf $index | grep "^[^/]*/$"` ]; then
            setx echo $index has already been unpacked.;
        else
            mkdir -p $SOURCES
            tar -xf $index -C $SOURCES;
        fi
    done
fi

LASTDONEFILE=$OBJECTS/build.last
if [ ! -f $LASTDONEFILE ]; then
    echo 0 >$LASTDONEFILE
fi
LASTDONE=`cat $LASTDONEFILE`;
if [ "$n" -le "$LASTDONE" ] 2>/dev/null; then 
    # bash bug: believe it or not, but this version of bash just exits
    # when something is assigned to a variable that _evaluates_ to 0.
    # Thus, while the line below is logically equivalent to:
    # LASTDONE=`expr $n - 1`;
    # we need to handle the case when $n is 1 in a different way!
    if [ "$n" -eq "1" ]; then LASTDONE=0; else LASTDONE=`expr $n - 1`; fi
fi
if ! $s; then echo $LASTDONE >$LASTDONEFILE; fi
DOCURRENT=0
cond() {
    DOCURRENT=$((DOCURRENT + 1))
    if $s; then
        if [ $DOCURRENT -gt $LASTDONE ]; then
            if [ "$N" == "false" ] || [ $DOCURRENT -le $N ]; then
                setx echo Step $DOCURRENT:
                setx echo "$@"
            fi
        fi
    else
        if [ $DOCURRENT -gt $LASTDONE ]; then
            if [ "$N" == "false" ] || [ $DOCURRENT -le $N ]; then
                setx echo Step $DOCURRENT:
                setx "$@"
                LASTDONE=$((LASTDONE+1))
                echo $LASTDONE >$LASTDONEFILE
            fi
        fi
    fi
}


function doit() {
    local sim;
    if $s; then sim=echo; fi
    if $c; then
        banner "DELETING DERIVED FILES"
        setx $sim rm -rf $OBJECTS 2>&1 | sed -e '/^++* eval/d' 1>&2
        setx $sim rm -rf $PREFIX 2>&1 | sed -e '/^++* eval/d' 1>&2
        if $m; then
            setx $sim make -C $SOURCES/../ownsrc/aud_lib clean 2>&1 | sed -e '/^++* eval/d' 1>&2
        else
            setx $sim make -C $SOURCES/../ownsrc/aud_lib -f Makefile Platforms=$AUDIS_TARGET clean 2>&1 | sed -e '/^++* eval/d' 1>&2
        fi
        return 0;
    fi
    
    banner "CHEATED BUILD" 2
    cond mkdir -p $OBJECTS/glibc $SYSROOTUSR
    cond tar -C $OBJECTS/glibc -xf $SOURCES/glibc/baseLibsAud/$CHEATFILE
    cond chmod -R 755 $OBJECTS/glibc/$CHEATDIR
    cond cp -rf $OBJECTS/glibc/$CHEATDIR/* $SYSROOTUSR
    cond cp -f $SOURCES/linux/include/linux/aud/* $SYSROOTUSR/include/linux/aud

    banner "BINUTILS"
    cond mkdir -p $OBJECTS/binutils
    cond "cd $OBJECTS/binutils && $SOURCES/binutils/configure --target=$AUDIS_TARGET --prefix=$PREFIX $BINUTILSCONFIG $WITHSYSROOT"
    cond make -C $OBJECTS/binutils -j$j
    cond make -C $OBJECTS/binutils -j$j install

    banner "GCC"
    cond mkdir -p $OBJECTS/$GCC
    cond "cd $OBJECTS/$GCC && $SOURCES/$GCC/configure --target=$AUDIS_TARGET --prefix=$PREFIX --enable-languages=c,c++ --disable-libgomp $GCCCONFIG $WITHSYSROOT"
    cond make -C $OBJECTS/$GCC -j$j $GCCMAKE
    cond make -C $OBJECTS/$GCC -j$j $GCCMAKE install

    banner "LINUX HEADERS"
    cond mkdir -p $OBJECTS/linux
    cond make -C $SOURCES/linux O=$OBJECTS/linux ARCH=$LINUXARCH INSTALL_HDR_PATH=$SYSROOTUSR headers_install

    banner "GLIBC"
    cond cp -f $SOURCES/glibc/$GLIBCCONFIGPARAMS $OBJECTS/glibc/configparms
    cond "cd $OBJECTS/glibc && $SOURCES/glibc/configure --prefix=$PREFIX/$AUDIS_TARGET --host=$AUDIS_TARGET --build=i686-pc-linux --with-headers=$SYSROOTUSR/include --disable-sanity-checks --with-tls libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes $GLIBCCONFIG"
    cond cp -f $SOURCES/linux/include/linux/compiler.h $SYSROOTUSR/include/linux
    cond cp -f $SOURCES/glibc/rt/rt/internal.h $SYSROOTUSR/include/rt
    cond make -C $OBJECTS/glibc -j$j AUTOCONF=no user-defined-trusted-dirs=$TRUSTED

    banner "CLEAN INSTALL" 2
    cond rm -rf $PREFIX
    if [ "$AUDIS_VERSION" == "3" -a "$AUDIS_TOOLCHAIN" == arm ]; then
        # Looks like we still need to cheat for the AuDis 3 ARM
        # build, but we are quite clean for everything else :-).
        banner "CHEAT INSTALL"
        cond mkdir -p $SYSROOTUSR
        cond cp -rf $OBJECTS/glibc/$CHEATDIR/* $SYSROOTUSR
    fi
    banner "BINUTILS INSTALL"
    cond make -C $OBJECTS/binutils -j$j install
    banner "LINUX HEADERS INSTALL"
    cond make -C $SOURCES/linux O=$OBJECTS/linux ARCH=$LINUXARCH INSTALL_HDR_PATH=$SYSROOTUSR headers_install
    cond cp -rf $SOURCES/linux/include/linux/aud $SYSROOTUSR/include/linux
    banner "GLIBC HEADERS INSTALL"
    # This is how we did it before ...
    #cond tar xf $SOURCES/glibc/baseLibsAud/$CHEATFILE
    #cond cp -rf $OBJECTS/glibc/$CHEATDIR/* $PREFIX/$AUDIS_TARGET
    # ... and this is our clean approach as we do it now ...
    cond make -C $OBJECTS/glibc -j$j AUTOCONF=no user-defined-trusted-dirs=$TRUSTED install_root=$SYSROOTUSR prefix="" install-headers
    cond cp -f $SOURCES/glibc/include/gnu/stubs.h $SYSROOTUSR/include/gnu
    cond cp -f $OBJECTS/glibc/bits/stdio_lim.h $SYSROOTUSR/include/bits
    cond cp -f $SOURCES/linux/include/linux/compiler.h $SYSROOTUSR/include/linux
    cond mkdir -p $SYSROOTUSR/lib
    cond cp -f $OBJECTS/glibc/csu/crti.o $SYSROOTUSR/lib
    cond cp -f $OBJECTS/glibc/libc.so $SYSROOTUSR/lib
    cond cp -f $OBJECTS/glibc/dlfcn/libdl.so $SYSROOTUSR/lib
    cond cp -f $OBJECTS/glibc/csu/crtn.o $SYSROOTUSR/lib
    # ... so that we are again able to install gcc (and glibc).
    banner "GCC INSTALL"
    if ! [ -e $OBJECTS/$GCC/gcc/$LIMITSDIR/limits.h.sav ]; then
        cond cp $OBJECTS/$GCC/gcc/$LIMITSDIR/limits.h $OBJECTS/$GCC/gcc/$LIMITSDIR/limits.h.sav
    else
        # We need this to have the same number of steps when reexecuting.
        cond true The file limits.h has already be copied.
    fi
    cond "cat $OBJECTS/$GCC/gcc/$LIMITSDIR/limits.h.sav $SOURCES/glibc/limitsAud.h >$OBJECTS/$GCC/gcc/$LIMITSDIR/limits.h"
    cond make -C $OBJECTS/$GCC -j$j $GCCMAKE install
    banner "GLIBC INSTALL"
    if [ "$AUDIS_TOOLCHAIN" == "powerpc" -o "$AUDIS_TOOLCHAIN" == "mipsel" -o "$AUDIS_TOOLCHAIN" == "mipseb" ]; then
        cond cp -f $OBJECTS/glibc/$CHEATDIR/include/sys/io.h $PREFIX/$AUDIS_TARGET/include/sys
    fi
    cond make -C $OBJECTS/glibc -j$j AUTOCONF=no user-defined-trusted-dirs=$TRUSTED install
    cond cp -f $OBJECTS/glibc/nptl_db/libthread_db_pic.a $PREFIX/$AUDIS_TARGET/lib
    cond cp -f $OBJECTS/glibc/nptl_db/libthread_db_pic.a $PREFIX/$AUDIS_TARGET/lib/libthread_db.a
    if ! $r; then
        # This is how we did it before, misleading and messing up arm ...
        #sed -i -e '/GROUP/ c\GROUP ( libc.so.6 libc_nonshared.a  AS_NEEDED ( ld-linux.so.2 ) )' $PREFIX/$AUDIS_TARGET/lib/libc.so
        #sed -i -e '/GROUP/ c\GROUP ( libpthread.so.0 libpthread_nonshared.a )' $PREFIX/$AUDIS_TARGET/lib/libpthread.so
        # ... while we clearly see now that we just remove the absolute pathes. 
        cond sed -i -e "/GROUP/s%$PREFIX/$AUDIS_TARGET/lib/%%g" $PREFIX/$AUDIS_TARGET/lib/libc.so $PREFIX/$AUDIS_TARGET/lib/libpthread.so
    fi

    banner "ADDONS BUILD AND INSTALL" 2
    banner "AUDIS"
    cond cp -f $SOURCES/linux/include/linux/linkage.h $SYSROOTUSR/include/linux
    cond cp -f $SOURCES/linux/arch/$LINUXARCH/include/asm/linkage.h $SYSROOTUSR/include/asm
    cond cp -f $SOURCES/linux/include/linux/stringify.h $SYSROOTUSR/include/linux
    if $m; then
        cond make -C $SOURCES/../ownsrc/aud_lib -j$j TOOL_PRE_$AUDENV=${AUDIS_TARGET}- TOOL_LIB_BASE_$AUDENV=$SYSROOTUSR/lib GCC_LIB_BASE_$AUDENV=$PREFIX/lib/gcc/$AUDIS_TARGET/4.2.3 lib$AUDTARGET
        cond make -C $SOURCES/../ownsrc/aud_lib -j$j TOOL_PRE_$AUDENV=${AUDIS_TARGET}- TOOL_LIB_BASE_$AUDENV=$SYSROOTUSR/lib GCC_LIB_BASE_$AUDENV=$PREFIX/lib/gcc/$AUDIS_TARGET/4.2.3 install_$AUDTARGET
    else
        cond make -C $SOURCES/../ownsrc/aud_lib -j$j -f Makefile Platforms=$AUDIS_TARGET AUDIS_TOOL_PATH=$PREFIX
        cond make -C $SOURCES/../ownsrc/aud_lib -j$j -f Makefile Platforms=$AUDIS_TARGET AUDIS_TOOL_PATH=$PREFIX install
    fi

    banner "GDB"
    cond mkdir -p $OBJECTS/gdb
    cond "cd $OBJECTS/gdb && $SOURCES/gdb/configure --target=$AUDIS_TARGET --prefix=$PREFIX --build=i686-pc-linux --without-expat $WITHSYSROOT"
    cond make -C $OBJECTS/gdb -j$j
    cond make -C $OBJECTS/gdb -j$j install

    banner "GDBSERVER"
    cond mkdir -p $OBJECTS/gdb/gdbserver
    cond "cd $OBJECTS/gdb/gdbserver && $SOURCES/gdb/gdb/gdbserver/configure --target=$AUDIS_TARGET --host=$AUDIS_TARGET --prefix=$PREFIX --build=i686-pc-linux --without-expat $WITHSYSROOT"
    cond make -C $OBJECTS/gdb/gdbserver -j$j CFLAGS+=-DUSE_AUDIS_THREADNAME_SUPPORT GDBSERVER_LIBS+=-lthread_db GDBSERVER_LIBS+=-laudis GDBSERVER_LIBS+=-lrt GDBSERVER_LIBS+=-lpthread GDBSERVER_LIBS+=-ldl
    cond make -C $OBJECTS/gdb/gdbserver -j$j install

    if [ "$AUDIS_TOOLCHAIN" != "i686" ]; then
        banner "MKIMAGE"
        cond mkdir -p $OBJECTS/u-boot
        cond gcc -DUSE_HOSTCC -I$SOURCES/u-boot/include/ -o $OBJECTS/mkimage $SOURCES/u-boot/tools/mkimage.c $SOURCES/u-boot/lib_generic/crc32.c
        cond cp $OBJECTS/mkimage $PREFIX/bin/$AUDIS_TARGET-mkimage
    fi

    if $i; then
        banner "FINAL INSTALL"
        if [ -d $AUDIS_TOOL_PATH ]; then cond cp -Rf $PREFIX/* $AUDIS_TOOL_PATH; else cond false; fi
    fi

    banner "FINISHED SUCCESFULLY"
}

tail -f $SCREEN --pid=$$ | sed -e 's/^++* eval echo \(.*\)$/\1/'\
                               -e 's/^++* eval \(.*\)$/\1/' 2>/dev/null&
#tail -f $SCREEN --pid=$$&

if $s || $c; then swap doit >/dev/null 2>&1; else swap doit 2>&1 | sed -e '/^++* eval/d' -e '/^++* echo/d' >$log; fi
#if $s || $c; then swap doit >/dev/null 2>&1; else swap doit >$log 2>&1; fi

# Dirty hack to wait for tail to print all its messages.
sleep 1
rm -f $SCREEN
